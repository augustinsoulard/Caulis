# Permet de charger une fonction en attribuant automatique le nom du fichier chargé
# comme nom de varibale
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header))
}
}
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
# FCD_TYPO = 28 # PVF2
############################################################   taxon_hab
taxon_hab = function(FCD_TYPO = "28"){
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
load_data("HABREF_70", "../HABREF_70.csv")
load_data("HABREF_CORRESP_TAXON_70","../HABREF_CORRESP_TAXON_70.csv")
typo = HABREF_70 %>% filter(CD_TYPO == FCD_TYPO)
typo_taxa = left_join(typo,HABREF_CORRESP_TAXON_70,by=c("CD_HAB"="CD_HAB_ENTRE"))
return(typo_taxa)
}
###############################################################################
PVF2_TAXON = taxon_hab(28)
# FCD_TYPO = 28 # PVF2
############################################################   taxon_hab
taxon_hab = function(FCD_TYPO = "28"){
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
load_data("HABREF_70", "data/HABREF_70/HABREF_70.csv")
load_data("HABREF_CORRESP_TAXON_70","data/HABREF_70/HABREF_CORRESP_TAXON_70.csv")
typo = HABREF_70 %>% filter(CD_TYPO == FCD_TYPO)
typo_taxa = left_join(typo,HABREF_CORRESP_TAXON_70,by=c("CD_HAB"="CD_HAB_ENTRE"))
return(typo_taxa)
}
###############################################################################
PVF2_TAXON = taxon_hab(28)
# Charger les bibliotheques necessaires
if(!require("readxl")){install.packages("readxl")} ; library("readxl")
if(!require("tidyverse")){install.packages("tidyverse")} ; library("tidyverse")
###############################################################################
PVF2_TAXON = taxon_hab(28)
getwd()
load_data("HABREF_70", "data/HABREF_70/HABREF_70.csv")
!exists("HABREF_70")
exists("HABREF_70")
# Permet de charger une fonction en attribuant automatique le nom du fichier chargé
# comme nom de varibale
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (exists(data_name)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header))
}
}
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
load_data("HABREF_70", "data/HABREF_70/HABREF_70.csv")
load_data("HABREF_CORRESP_TAXON_70","data/HABREF_70/HABREF_CORRESP_TAXON_70.csv")
assign("HABREF_70", read.csv("data/HABREF_70/HABREF_70.csv", sep = ";", header = TRUE))
data_name = "TYPOREF_70"
path = "data/HABREF_70/TYPOREF_70.csv"
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header))
}
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header))
}
}
sep = ";"
header = TRUE
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header))
load_data("HABREF_CORRESP_TAXON_70","data/HABREF_70/HABREF_CORRESP_TAXON_70.csv")
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name,envir = .GlobalEnv)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header), envir = .GlobalEnv)
}
}
load_data("HABREF_CORRESP_TAXON_70","data/HABREF_70/HABREF_CORRESP_TAXON_70.csv")
# Charger les bibliotheques necessaires
if(!require("readxl")){install.packages("readxl")} ; library("readxl")
if(!require("tidyverse")){install.packages("tidyverse")} ; library("tidyverse")
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name,envir = .GlobalEnv)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header), envir = .GlobalEnv)
}
}
# FCD_TYPO = 28 # PVF2
############################################################   taxon_hab
taxon_hab = function(FCD_TYPO = "28"){
load_data("TYPOREF_70", "data/HABREF_70/TYPOREF_70.csv")
load_data("HABREF_70", "data/HABREF_70/HABREF_70.csv")
load_data("HABREF_CORRESP_TAXON_70","data/HABREF_70/HABREF_CORRESP_TAXON_70.csv")
typo = HABREF_70 %>% filter(CD_TYPO == FCD_TYPO)
typo_taxa = left_join(typo,HABREF_CORRESP_TAXON_70,by=c("CD_HAB"="CD_HAB_ENTRE"))
return(typo_taxa)
}
###############################################################################
PVF2_TAXON = taxon_hab(28)
View(PVF2_TAXON)
if(!require("foreign")){install.packages("foreign")} ; library("foreign")
data_flore = st_read("Flore/Flore.dbf")
if(!require("sf")){install.packages("sf")} ; library("sf")
data_flore = st_read("Flore/Flore.dbf")
View(data_flore)
data_flore = st_read("Flore/Flore.shp")
View(data_flore)
data_hab = st_read("Habitats/HABITATS_POLYGONES.shp")
View(HABREF_CORRESP_TAXON_70)
View(data_hab)
st_intersection(data_flore, data_hab)
test = st_intersection(data_flore, data_hab)
View(test)
intersection_habflore = st_intersection(data_flore, data_hab)
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name,envir = .GlobalEnv)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header), envir = .GlobalEnv)
}
}
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv")
data_flore$lb_nom
listetaxa = data_flore$lb_nom
data.frame(listetaxa)
listetaxa = data.frame(listetaxa)
View(listetaxa)
listetaxa = data.frame("LB_NOM" = listetaxa)
View(taxadata)
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
View(taxadata)
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
# Permet de charger un tableay en attribuant un nom
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
if (!exists(data_name,envir = .GlobalEnv)) {
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header), envir = .GlobalEnv)
}
}
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
# Permet de charger un tableay en attribuant un nom
load_data <- function(data_name,
path,
sep = ";",
header = TRUE) {
# Vérifiez si l'objet 'data_name' existe déjà
# Si l'objet n'existe pas, chargez les données
assign(data_name, read.csv(path, sep = sep, header = header), envir = .GlobalEnv)
}
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
rm(raxadata)
rm(taxadata)
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
View(taxadata)
View(listetaxa)
listetaxa = data_flore$lb_nom
listetaxa = data.frame("LB_NOM" = listetaxa)
View(listetaxa)
left_join(listetaxa,taxadata,by="LB_NOM")
CD_NOM = left_join(listetaxa,taxadata,by="LB_NOM") %>% select(CD_NOM)
View(CD_NOM)
return(CD_NOM)
updatetaxa = function(liste_cd_nom){
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR_SYN.csv",sep=",")
liste_cd_nom = data.frame("CD_NOM" = liste_cd_nom)
CD_NOM_actuel = left_join(liste_cd_nom,taxadata,by="CD_NOM") %>% select(CD_REF)
}
updatetaxa(CD_NOM)
updatetaxa = function(liste_cd_nom){
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR_SYN.csv",sep=",")
liste_cd_nom = data.frame("CD_NOM" = liste_cd_nom)
CD_NOM_actuel = left_join(liste_cd_nom,taxadata,by="CD_NOM") %>% select(CD_REF)
return(CD_NOM_actuel)
}
updatetaxa(CD_NOM)
###################Renvoie le CD_NOM actualisé à partir
findtaxa = function(listetaxa,
referenciel = "TAXREF_70",
correspondance = "LB_NOM",
correspondance_type = "simple",
actualisation_CD_NOM = TRUE){
if(referenciel == "TAXREF_70"){
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
}
if(correspondance_type==simple){
listetaxa = data.frame(correspondance = listetaxa)
CD_NOM = left_join(listetaxa,taxadata,by=correspondance) %>% select(CD_NOM)
#Actualisation du CD_NOM
if(actualisation_CD_NOM == TRUE){
CD_NOM = updatetaxa(CD_NOM)
}
return(CD_NOM)
}
}
findtaxa(intersection_habflore$lb_nom)
###################Renvoie le CD_NOM actualisé à partir d'une liste d'espèce
findtaxa = function(listetaxa,
referenciel = "TAXREF_70",
correspondance = "LB_NOM",
correspondance_type = "simple",
actualisation_CD_NOM = TRUE){
if(referenciel == "TAXREF_70"){
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
}
if(correspondance_type=="simple"){
listetaxa = data.frame(correspondance = listetaxa)
CD_NOM = left_join(listetaxa,taxadata,by=correspondance) %>% select(CD_NOM)
#Actualisation du CD_NOM
if(actualisation_CD_NOM == TRUE){
CD_NOM = updatetaxa(CD_NOM)
}
return(CD_NOM)
}
}
findtaxa(intersection_habflore$lb_nom)
###################Renvoie le CD_NOM actualisé à partir d'une liste d'espèce
findtaxa = function(listetaxa,
referenciel = "TAXREF_70",
correspondance_type = "simple",
actualisation_CD_NOM = TRUE){
if(referenciel == "TAXREF_70"){
load_data("taxadata","data/TAXREF_17/TAXREFv17_FLORE_FR.csv",sep=",")
}
if(correspondance_type=="simple"){
listetaxa = data.frame("LB_NOM" = listetaxa)
CD_NOM = left_join(listetaxa,taxadata,by="LB_NOM") %>% select(CD_NOM)
#Actualisation du CD_NOM
if(actualisation_CD_NOM == TRUE){
CD_NOM = updatetaxa(CD_NOM)
}
return(CD_NOM)
}
}
findtaxa(intersection_habflore$lb_nom)
data_flore$CD_NOM = findtaxa(data_flore$lb_nom)
View(data_flore)
intersection_habflore = st_intersection(data_flore, data_hab)
intersection_habflore = intersection_habflore %>% select(CD_NOM,LB_NOM = lb_nom,HABLABEL = hablabel,geometry)
View(intersection_habflore)
1:nrow(data_hab)
data_hab$fid_hab = 1:nrow(data_hab)
intersection_habflore = st_intersection(data_flore, data_hab)
intersection_habflore = intersection_habflore %>% select(CD_NOM,LB_NOM = lb_nom,HABLABEL = hablabel,geometry)
intersection_habflore = intersection_habflore %>% select(CD_NOM,LB_NOM = lb_nom,HABLABEL = hablabel,fid_hab,geometry)
# utiliser les chemins du kit_bota Qfield
if(dataflore_type == "kit_bota"){
data_flore = st_read("Flore/Flore.shp")
data_flore$CD_NOM = findtaxa(data_flore$lb_nom)
}
data_flore = st_read("Flore/Flore.shp")
data_flore$CD_NOM = findtaxa(data_flore$lb_nom)
data_hab = st_read("Habitats/HABITATS_POLYGONES.shp")
data_hab$fid_hab = 1:nrow(data_hab)
intersection_habflore = st_intersection(data_flore, data_hab)
intersection_habflore = intersection_habflore %>% select(CD_NOM,LB_NOM = lb_nom,HABLABEL = hablabel,fid_hab,geometry)
intersection_habflore$habid = paste0(intersection_habflore$HABLABEL,"_",intersection_habflore$fid_hab)
View(intersection_habflore)
