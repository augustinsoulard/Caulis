match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch= 0)
match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,namatch=O)==O
match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,namatch=0)==0
match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0
!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0
PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
View(PVF2)
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 %>% filtrer(!is.na(CD_NOM))
PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
View(PVF2)
count(PVF2$LB_HAB_FR)
?count
PVF2 %>% count(LB_HAB_FR)
#Comptage des occurences des syntaxons en correspondance aux espèces
PVF2 %>% count(LB_HAB_FR)
#Comptage des occurences des syntaxons en correspondance aux espèces
PVF2 %>% count(LB_HAB_FR,sort = T)
if(!require("sf")){install.packages("sf")} ; library("sf")
if(!require("foreign")){install.packages("foreign")} ; library("foreign") # Pour read.dbf
if(!require("RVAideMemoire")){install.packages("RVAideMemoire")} ; library("RVAideMemoire")
if(!require("vegan")){install.packages("vegan")} ; library("vegan")
source("function/taxabase.R")
source("function/habref_function.R")
#Chargement des données  KIT BOTA QFIELD
Flore = read.dbf("FLore/Flore.dbf")
# Prépration du tableau de relevé à partir du KIT BOTA QFIELD
FloreRELEVE = Flore %>% filter(!is.na(releve)==TRUE) %>% select(releve,lb_nom) %>% mutate(P = 1)
FloreRELEVE$CD_NOM = findtaxa(FloreRELEVE$lb_nom)
#Charement de taxref
TAXREFv17 = read.csv("data/TAXREF_17/TAXREFv17_FLORE_FR_SYN.csv",h=T)
TAXREFv17tojoin = TAXREFv17 %>% select(CD_NOM, LB_NOM)
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
PVF2 %>% count(LB_HAB_FR,sort = T)
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T))
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T):8)
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),8)
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0))
View(PVF2contingence)
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = RELEVE, values_from = P, values_fill = list(P = 0))
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
View(tabContingence)
tabContingence = left_join(tabContingence,PVF2contingence,by="LB_NOM")
tabContingence = left_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"))
View(tabContingence)
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$LB_NOM
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
View(tabContingence)
tabContingence %>% filter(!is.na(lb_nom))
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
View(tabContingence)
#Création du tableau DEDOU
DEDOU = tabContingence*-1+1
tabContingence[3:n(col(tabContingence))]
tabContingence[,3:n(col(tabContingence))]
tabContingence[,3:ncol(tabContingence)]
#Création du tableau DEDOU
DEDOU = tabContingence[,3:ncol(tabContingence)]*-1+1
DEDOU = DEDOU %>%  select(-CD_NOM, -LB_NOM)
View(DEDOU)
colnames(DEDOU) = paste0('zz',colnames(DEDOU))
DEDOU = cbind(tabContingence,DEDOU)
#Réalisation de l'AFC
AFC<-cca(t(DEDOU[,3:ncol(DEDOU)]))
DEDOU[,3:ncol(DEDOU)]
View(DEDOU)
DEDOU[,3:ncol(DEDOU)]
t(DEDOU[,3:ncol(DEDOU)])
View(DEDOU)
View(tabContingence)
#Création du tableau DEDOU
DEDOU = tabContingence[,3:ncol(tabContingence)]*-1+1
View(DEDOU)
row.names(DEDOU) = tabContingence$lb_nom
colnames(DEDOU) = paste0('zz',colnames(DEDOU))
DEDOU = cbind(tabContingence,DEDOU)
#Réalisation de l'AFC
AFC<-cca(t(DEDOU[,3:ncol(DEDOU)]))
t(DEDOU[,3:ncol(DEDOU)])
test = t(DEDOU[,3:ncol(DEDOU)])
View(test)
cca(t(DEDOU[,3:ncol(DEDOU)]))
View(DEDOU)
#Suppression des colonnes avec des NA
cols_with_na <- colSums(is.na(DEDOU)) > 0
count(cols_with_na)
DEDOU <- DEDOU[, !cols_with_na]
View(DEDOU)
#Création du tableau DEDOU
DEDOU = tabContingence[,3:ncol(tabContingence)]*-1+1
row.names(DEDOU) = tabContingence$lb_nom
colnames(DEDOU) = paste0('zz',colnames(DEDOU))
DEDOU = cbind(tabContingence,DEDOU)
#Suppression des colonnes avec des NA
rows_with_na <- rowSums(is.na(DEDOU)) > 0
DEDOU <- DEDOU[!rows_with_na,]
View(DEDOU)
#Réalisation de l'AFC
AFC<-cca(t(DEDOU[,3:ncol(DEDOU)]))
summaryAFC = summary(AFC)
summaryAFC
MVA.synt(AFC)
stressplot(AFC)
# Extraire les scores des espèces et des sites
species_scores <- as.data.frame(scores(AFC, display = "species"))
sites_scores <- as.data.frame(scores(AFC, display = "sites"))
# Ajouter les noms des espèces et des sites aux dataframes
species_scores$species <- rownames(species_scores)
sites_scores$sites <- rownames(sites_scores)
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores)))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = Inf) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
View(AFC)
scores(afc_result, display = "sites")
scores(AFC, display = "sites")
# Extraire les coordonnées des sites
site_scores <- scores(AFC, display = "sites")
# Supposons que vous cherchez les sites les plus proches du site 1
site_of_interest <- 1
# Calculer les distances euclidiennes entre le site d'intérêt et tous les autres sites
distances <- sqrt(rowSums((site_scores - site_scores[site_of_interest, ])^2))
# Classer les distances pour trouver les sites les plus proches
closest_sites <- order(distances)
# Afficher les sites les plus proches
# Exclure le site d'intérêt lui-même en prenant les éléments à partir du deuxième
closest_sites <- closest_sites[closest_sites != site_of_interest]
print(closest_sites)
print(site_scores[closest_sites, ])
# Supposons que vous cherchez les sites les plus proches du site 1
site_of_interest <- R1
# Calculer les distances euclidiennes entre le site d'intérêt et tous les autres sites
distances <- sqrt(rowSums((site_scores - site_scores[site_of_interest, ])^2))
# Classer les distances pour trouver les sites les plus proches
closest_sites <- order(distances)
# Afficher les sites les plus proches
# Exclure le site d'intérêt lui-même en prenant les éléments à partir du deuxième
closest_sites <- closest_sites[closest_sites != site_of_interest]
print(closest_sites)
print(site_scores[closest_sites, ])
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores)))
sites_to_always_label <- site_scores %>%
filter(sites %in% c("R1", "R2", "R3"))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
sites_scores_filtered <- site_scores %>%
filter(sites_scores %in% c("R1", "R2", "R3"))
sites_scores_filtered <- site_scores %>%
filter(grepl("^R1", rownames(sites_scores)))
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores)))
grepl("^zz", rownames(sites_scores))
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores)),
filter(grepl("^R1", rownames(sites_scores))))
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores)),
grepl("^R1", rownames(sites_scores)))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- site_scores %>%
filter(!grepl("^zz", sites) | grepl("^R[1-3]", sites))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
grepl("^R[1-3]", sites)
grepl("^R[1-3]", site_scores)
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- site_scores %>%
filter(!grepl("^zz", site_scores) | grepl("^R[1-3]", site_scores))
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores))|grepl("^R1", rownames(sites_scores)))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 10) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores))|grepl("^R[1-3]", rownames(sites_scores)))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
View(DEDOU)
View(AFC)
dist(site_scores)
mat_dist = dist(site_scores)
mat_dist["R1"]
mat_dist = data.frame(dist(site_scores))
mat_dist[1]
distances_R1 <- mat_dist[rownames(mat_dist) == "R1", ]
mat_dist_matrix <- as.matrix(mat_dist)
distances_R1 <- mat_dist[rownames(mat_dist) == "R1", ]
distances_R1 <- mat_dist_matrix["R1", ]
print(distances_R1)
print(sort(distances_R1))
print(head(sort(distances_R1)))
print(head(arrange(desc(distances_R1))))
print(head(sort(desc(distances_R1))))
View(mat_dist_matrix)
distances_R1 <- mat_dist_matrix[,"R1" ]
mat_dist_matrix[,"R1" ]
desc(mat_dist_matrix[,"R1" ])
head(desc(mat_dist_matrix[,"R1" ]))
head(desc(mat_dist_matrix["R1",]))
head(desc(mat_dist_matrix["R1", ]), n = 5)
View(mat_dist_matrix)
head(desc(mat_dist_matrix["R1", ]), n = 5)
head(sort(mat_dist_matrix["R1", ])))
head(sort(mat_dist_matrix["R1", ]))
View(Flore)
PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2[,!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0]
semi_join(PVF2, FloreRELEVE, by = "CD_NOM")
test = semi_join(PVF2, FloreRELEVE, by = "CD_NOM")
View(test)
View(test)
match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0))
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
tabContingence = left_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"))
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
View(tabContingence)
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0))
PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0))
if(!require("sf")){install.packages("sf")} ; library("sf")
if(!require("foreign")){install.packages("foreign")} ; library("foreign") # Pour read.dbf
if(!require("RVAideMemoire")){install.packages("RVAideMemoire")} ; library("RVAideMemoire")
if(!require("vegan")){install.packages("vegan")} ; library("vegan")
source("function/taxabase.R")
source("function/habref_function.R")
#Chargement des données  KIT BOTA QFIELD
Flore = read.dbf("FLore/Flore.dbf")
# Prépration du tableau de relevé à partir du KIT BOTA QFIELD
FloreRELEVE = Flore %>% filter(!is.na(releve)==TRUE) %>% select(releve,lb_nom) %>% mutate(P = 1)
FloreRELEVE$CD_NOM = findtaxa(FloreRELEVE$lb_nom)
#Charement de taxref
TAXREFv17 = read.csv("data/TAXREF_17/TAXREFv17_FLORE_FR_SYN.csv",h=T)
TAXREFv17tojoin = TAXREFv17 %>% select(CD_NOM, LB_NOM)
#Chargement des données de références
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
#PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0))
PVF2 %>%
select(LB_HAB_FR, LB_NOM) %>%
mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P, values_fill = 0)
PVF2contingence <- PVF2 %>%
select(LB_HAB_FR, LB_NOM) %>%
mutate(P = 1) %>%
dcast(LB_NOM ~ LB_HAB_FR, value.var = "P", fun.aggregate = sum, fill = 0)
if(!require("reshape2")){install.packages("reshape2")} ; library("reshape2")
PVF2contingence <- PVF2 %>%
select(LB_HAB_FR, LB_NOM) %>%
mutate(P = 1) %>%
dcast(LB_NOM ~ LB_HAB_FR, value.var = "P", fun.aggregate = sum, fill = 0)
View(PVF2contingence)
#PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
#  pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0)) # Code parfois disfonctionnel
PVF2contingence <- PVF2 %>%
select(LB_HAB_FR, LB_NOM, CD_NOM) %>%
mutate(P = 1) %>%
dcast(LB_NOM ~ LB_HAB_FR + CD_NOM, value.var = "P", fun.aggregate = sum, fill = 0)
View(PVF2contingence)
#PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
#  pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0)) # Code parfois disfonctionnel
PVF2contingence <- PVF2 %>%
select(LB_HAB_FR, LB_NOM, CD_NOM) %>%
mutate(P = 1) %>%
dcast(LB_NOM ~ LB_HAB_FR, value.var = "P", fun.aggregate = sum, fill = 0)
View(PVF2contingence)
PVF2contingence["R1"]
PVF2contingence[,"R1"]
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
tabContingence = left_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"))
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
tabContingence = full_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"))
View(tabContingence)
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
View(tabContingence)
View(tabContingence)
tabContingence = full_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"),na_action = 0)
View(tabContingence)
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
tabContingence = full_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"),na_action = 0)
View(tabContingence)
?full_join
replace(tabContingence, is.na(tabContingence), 0)
View(tabContingence)
PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
#PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
#  pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0)) # Code parfois disfonctionnel
PVF2contingence <- PVF2 %>%
select(LB_HAB_FR, LB_NOM, CD_NOM) %>%
mutate(P = 1) %>%
dcast(LB_NOM ~ LB_HAB_FR, value.var = "P", fun.aggregate = sum, fill = 0)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0)) # Code parfois disfonctionnel
PVF2 = taxon_hab(28)
PVF2$CD_NOM = updatetaxa(PVF2$CD_NOM)
PVF2 = PVF2[!match(PVF2$CD_NOM,FloreRELEVE$CD_NOM,nomatch=0)==0,]
PVF2 = PVF2 %>% filter(!is.na(CD_NOM))
PVF2 = left_join(PVF2,TAXREFv17tojoin,by='CD_NOM')
#Comptage des occurences des syntaxons en correspondance aux espèces
head(PVF2 %>% count(LB_HAB_FR,sort = T),20)
PVF2contingence = PVF2 %>% select(LB_HAB_FR,LB_NOM) %>% mutate(P = 1) %>%
pivot_wider(names_from = LB_HAB_FR, values_from = P,values_fill = list(P = 0)) # Code parfois disfonctionnel
min(sort(mat_dist_matrix["R1", ])))
min(sort(mat_dist_matrix["R1", ]))
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
tabContingence = full_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"),na_action = 0)
replace(tabContingence, is.na(tabContingence), 0)
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
#Préparation du tableau de contingence
tabContingence = FloreRELEVE %>% pivot_wider(names_from = releve, values_from = P, values_fill = list(P = 0))
tabContingence = full_join(tabContingence,PVF2contingence,by=c("lb_nom"="LB_NOM"))
#Suppression des lb_nom avec NA
tabContingence = tabContingence %>% filter(!is.na(lb_nom))
#Nommer les lignes par les noms d'espèces
row.names(tabContingence) = tabContingence$lb_nom
#Création du tableau DEDOU
DEDOU = tabContingence[,3:ncol(tabContingence)]*-1+1
row.names(DEDOU) = tabContingence$lb_nom
colnames(DEDOU) = paste0('zz',colnames(DEDOU))
DEDOU = cbind(tabContingence,DEDOU)
#Suppression des colonnes avec des NA
rows_with_na <- rowSums(is.na(DEDOU)) > 0
DEDOU <- DEDOU[!rows_with_na,]
#Réalisation de l'AFC
AFC<-cca(t(DEDOU[,3:ncol(DEDOU)]))
summaryAFC = summary(AFC)
summaryAFC
MVA.synt(AFC)
stressplot(AFC)
# Extraire les scores des espèces et des sites
species_scores <- as.data.frame(scores(AFC, display = "species"))
sites_scores <- as.data.frame(scores(AFC, display = "sites"))
# Ajouter les noms des espèces et des sites aux dataframes
species_scores$species <- rownames(species_scores)
sites_scores$sites <- rownames(sites_scores)
# Filtrer les relevés (sites) qui ne commencent pas par 'n'
sites_scores_filtered <- sites_scores %>%
filter(!grepl("^zz", rownames(sites_scores))|grepl("^R[1-3]", rownames(sites_scores)))
# Visualiser avec ggplot2 et ggrepel
if(!require("ggrepel")){install.packages("ggrepel")} ; library("ggrepel")
ggplot() +
geom_point(data = species_scores, aes(x = CA1, y = CA2), color = "blue") +
geom_point(data = sites_scores_filtered, aes(x = CA1, y = CA2), color = "red") +
#geom_text_repel(data = species_scores, aes(x = CA1, y = CA2, label = species), color = "blue", max.overlaps = 20) +
geom_text_repel(data = sites_scores_filtered, aes(x = CA1, y = CA2, label = sites), color = "red", max.overlaps = 20) +
labs(title = "AFC des données FloreRELEVE", x = "CA1", y = "CA2")
ggsave('AFC.jpg',  width = 3000,height =2000,units='px')
if(!require("xlsx")){install.packages("xlsx")} ; library("xlsx")
#Matrice de distance pour vérifier les similitudes
mat_dist = dist(site_scores)
#Matrice de distance pour vérifier les similitudes
mat_dist = dist(site_scores)
#Matrice de distance pour vérifier les similitudes
mat_dist = dist(sites_scores)
mat_dist_matrix <- as.matrix(mat_dist)
min(sort(mat_dist_matrix["R1", ]))
min(sort(mat_dist_matrix["R1" ]))
min(sort(mat_dist_matrix["R1",]))
min(sort(mat_dist_matrix["R1"]))
mat_dist_matrix["R1"]
mat_dist_matrix["R1"]
mat_dist_matrix
min(sort(mat_dist_matrix["R1",]))
min(sort(mat_dist_matrix[1]))
min(sort(mat_dist_matrix[,1]))
mat_dist_matrix[,1]
##################-----PARAMETRE-----#########################
nb_releve = 3
min(sort(mat_dist_matrix[,1]))
sort(mat_dist_matrix[,1])
min(sort(mat_dist_matrix[,1]))
min(sort(mat_dist_matrix[,1]),3)
?min
pmin(sort(mat_dist_matrix[,1]))
pmin(sort(mat_dist_matrix[,1]),3)
sorted_list = sort(mat_dist_matrix[,1])
unique(sorted_list)[1:5]
sort(mat_dist_matrix[,1],20)
head(sort(mat_dist_matrix[,1],20)
head(sort(mat_dist_matrix[,1]),20)
head(sort(mat_dist_matrix[,1]),20)
# Afficher les associations similaires aux relevées
head(sort(mat_dist_matrix[,1:2]),20)
# Afficher les associations similaires aux relevées
head(sort(mat_dist_matrix[,"R1"]),20)
head(sort(mat_dist_matrix[,"R3"]),20)
head(sort(mat_dist_matrix[,"R3"]),20)
head(sort(mat_dist_matrix[,"R2"]),20)
# Afficher les associations similaires aux relevées
head(sort(mat_dist_matrix[,"R1"]),20)
View(FloreRELEVE)
colnames(head(sort(mat_dist_matrix[,"R1"]),20))
